Install Git & Git-Bash for windows
Configure user, email - this creates global config file .gitconfig in home directory
    git config --global user.name "penubala.rahul@gmail.com"
    git config --global user.email "penubala.rahul@gmail.com"
To change the default editor to VScode - git config --global core.editor "code --wait"
==================================================================
Git init - creates .git folder & initiates repo (exclude it in VScode setting to see it in explorer)
    do not initialize nested repos

To avoid files being added to staging area/commits, use .gitignore file in the repo home
    Secrets
    Logs
    OS files
    Dependencies, packages etc . . .
gitignore.io site is useful to find the template of files to be ignored for any module

HEAD -> points to branch reference of current branch
Branch reference -> points to latest commit of that branch
HEADLESS -> when we switch to a hash that is not latest commit
==================================================================
git branch    - list branches
git branch <name> - create branches (This does not automatically switch the branch)
git switch <name> / git checkout <name> / git switch -c <name> - Craetes a branch and switches in one command
A new branch inherits "parent" commits, but, then adds commits on its own
(HEAD -> testbranch,master) ==> Means, both master & testbranch are pointing to same commit, but HEAD points to testbranch

When there are uncommited changes, we should either commit them, or stash them before switching a branch

git branch -m <rename> - renaming a branch, when we are on the branch
git branch -d <name> - deleting a branch, from outside of it
git branch -D <name> - deleting even if it is not merged
======================================================================
Merging shoud always be compared with the "common merge base" commit
When a parent does not have any more newer commits, child can be merged using Fast forward merge - no merge commit
When a parent has some progress, child can be merged automatically when there are no conflicts of change - auto-merge commit created
    changes of any line from "base" to "child" & from "base" to "parent"
When there are conflicts, we need to manually resolve & "commit" to complete the merge
To abort running merger - git merge --abort
======================================================================
git diff <hash1> <hash2> of branches
git diff <branch1> <branch2> - compares branch references
git diff - last known staged(added) values VS working directory
git diff HEAD - last known HEAD(commiteed) values VS working directory
git diff --staged - HEAD VS staged  
=======================================================================
When we switch branches without committing any saved changes, we need stash
git stash [list]
git pop - removes/applies recent stash, does not remove if there are conflicts
git apply - only applies but does not remove
git drop 
========================================================================
git checkout <hash> - to go to old commit
git switch -c <branch> - to diverge from old commit
git switch - -> to go back to last hash
git switch <branch> - to get back to HEAD
git checkout HEAD file_name -> to discoard the working directory changes (even if they are "added" to stage)

Much easier commad to restore files content to latest commit - git restore file_name
git restore --staged file_name -> to instage files, and then the above command to discard changes
git restore --source HEAD~4 file_name -> To restore file conten, without time travelling

git restore --hard <hash> -> removes the faulty commits. "Hrd" option discards changes in working files
git rever <hash> -> keeps the faulty commit, but creates new commit with desired 'hash' stage
===========================================================================
After adding SSH keys in github, the below are needed for windows/git bash
Add the following text to .ssh/config (.ssh should be found in the root of your user home folder):
Host github.com
 Hostname github.com
 IdentityFile ~/.ssh/id_rsa
First, ensure that following lines are added to .bash_profile, which should be found in your root user home folder:

test -f ~/.profile && . ~/.profile
test -f ~/.bashrc && . ~/.bashrc
Now, add the following text to .bashrc, which should be found in your root user home folder:

# Start SSH Agent
#----------------------------

SSH_ENV="$HOME/.ssh/environment"

function run_ssh_env {
  . "${SSH_ENV}" > /dev/null
}

function start_ssh_agent {
  echo "Initializing new SSH agent..."
  ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
  echo "succeeded"
  chmod 600 "${SSH_ENV}"

  run_ssh_env;

  ssh-add ~/.ssh/id_rsa;
}

if [ -f "${SSH_ENV}" ]; then
  run_ssh_env;
  ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
    start_ssh_agent;
  }
else
  start_ssh_agent;
fi
=================================================================================
git remote -v
git remote add <name> <url>
git remote remove <name>
git push --set-upstream <remote> <branch>
git branch --unset-upstream <branch_name>
***Once we copy a repo, new copy inherits all properties from parent repo, but, then becomes its own
   Similar to how branches inherit parent properties, and then, become their own after creation
================================================================================
git branch -> shows only local branches
git remote -r -> shows remote branches
to check the code at remote branches -> git checkout remote/branch (it wont create local branches)
to create local branch from remote branch -> git switch <branch> (not needed for master)
***Remote branch reference moves forward, based the last communication with github. If we are the owner of the branch, we can PUSH

testing fetch & pull